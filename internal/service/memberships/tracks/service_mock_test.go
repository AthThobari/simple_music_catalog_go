// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package tracks is a generated GoMock package.
package tracks

import (
	context "context"
	reflect "reflect"

	spotify "github.com/AthThobari/simple_music_catalog_go/internal/repository/spotify"
	gomock "github.com/golang/mock/gomock"
)

// MockspotifyOutboound is a mock of spotifyOutboound interface.
type MockspotifyOutboound struct {
	ctrl     *gomock.Controller
	recorder *MockspotifyOutbooundMockRecorder
}

// MockspotifyOutbooundMockRecorder is the mock recorder for MockspotifyOutboound.
type MockspotifyOutbooundMockRecorder struct {
	mock *MockspotifyOutboound
}

// NewMockspotifyOutboound creates a new mock instance.
func NewMockspotifyOutboound(ctrl *gomock.Controller) *MockspotifyOutboound {
	mock := &MockspotifyOutboound{ctrl: ctrl}
	mock.recorder = &MockspotifyOutbooundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockspotifyOutboound) EXPECT() *MockspotifyOutbooundMockRecorder {
	return m.recorder
}

// Search mocks base method.
func (m *MockspotifyOutboound) Search(ctx context.Context, query string, limit, offset int) (*spotify.SpotifySearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, query, limit, offset)
	ret0, _ := ret[0].(*spotify.SpotifySearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockspotifyOutbooundMockRecorder) Search(ctx, query, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockspotifyOutboound)(nil).Search), ctx, query, limit, offset)
}
